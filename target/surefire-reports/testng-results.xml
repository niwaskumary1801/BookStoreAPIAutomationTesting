<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="15" passed="15" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-07-25T01:14:59 IST" name="FastAPI Test Suite" finished-at="2025-07-25T01:15:13 IST" duration-ms="13814">
    <groups>
    </groups>
    <test started-at="2025-07-25T01:14:59 IST" name="API Tests" finished-at="2025-07-25T01:15:13 IST" duration-ms="13814">
      <class name="tests.VerifyPositiveScenarioForUserAccountTest">
        <test-method is-config="true" signature="init()[pri:0, instance:tests.VerifyPositiveScenarioForUserAccountTest@72ea6193]" started-at="2025-07-25T01:14:57 IST" name="init" finished-at="2025-07-25T01:14:59 IST" duration-ms="1208" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="NewUserCreation()[pri:1, instance:tests.VerifyPositiveScenarioForUserAccountTest@72ea6193]" started-at="2025-07-25T01:14:59 IST" name="NewUserCreation" finished-at="2025-07-25T01:15:02 IST" duration-ms="3668" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NewUserCreation -->
        <test-method signature="GenerateNewTokentoAccessUser()[pri:2, instance:tests.VerifyPositiveScenarioForUserAccountTest@72ea6193]" started-at="2025-07-25T01:15:02 IST" name="GenerateNewTokentoAccessUser" finished-at="2025-07-25T01:15:04 IST" depends-on-methods="tests.VerifyPositiveScenarioForUserAccountTest.NewUserCreation" duration-ms="1120" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GenerateNewTokentoAccessUser -->
        <test-method signature="testUserIsCreated()[pri:3, instance:tests.VerifyPositiveScenarioForUserAccountTest@72ea6193]" started-at="2025-07-25T01:15:04 IST" name="testUserIsCreated" finished-at="2025-07-25T01:15:04 IST" depends-on-methods="tests.VerifyPositiveScenarioForUserAccountTest.NewUserCreation" duration-ms="710" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserIsCreated -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.VerifyPositiveScenarioForUserAccountTest@72ea6193]" started-at="2025-07-25T01:15:13 IST" name="tearDown" finished-at="2025-07-25T01:15:13 IST" duration-ms="424" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.VerifyPositiveScenarioForUserAccountTest -->
      <class name="tests.VerifyNegativeScenarioUserAndBook">
        <test-method signature="createBookInCollection()[pri:0, instance:tests.VerifyNegativeScenarioUserAndBook@3542162a]" started-at="2025-07-25T01:15:08 IST" name="createBookInCollection" finished-at="2025-07-25T01:15:08 IST" duration-ms="544" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBookInCollection -->
        <test-method signature="deleteBookFromCollection()[pri:0, instance:tests.VerifyNegativeScenarioUserAndBook@3542162a]" started-at="2025-07-25T01:15:08 IST" name="deleteBookFromCollection" finished-at="2025-07-25T01:15:09 IST" duration-ms="535" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteBookFromCollection -->
        <test-method signature="testGenerateTokenInvalidCredentials()[pri:0, instance:tests.VerifyNegativeScenarioUserAndBook@3542162a]" started-at="2025-07-25T01:15:09 IST" name="testGenerateTokenInvalidCredentials" finished-at="2025-07-25T01:15:10 IST" duration-ms="1210" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerateTokenInvalidCredentials -->
        <test-method signature="testUserIsCreated()[pri:0, instance:tests.VerifyNegativeScenarioUserAndBook@3542162a]" started-at="2025-07-25T01:15:10 IST" name="testUserIsCreated" finished-at="2025-07-25T01:15:11 IST" duration-ms="590" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserIsCreated -->
        <test-method signature="test_CreateUserWhenPayloadDataMissing()[pri:0, instance:tests.VerifyNegativeScenarioUserAndBook@3542162a]" started-at="2025-07-25T01:15:11 IST" name="test_CreateUserWhenPayloadDataMissing" finished-at="2025-07-25T01:15:11 IST" duration-ms="569" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_CreateUserWhenPayloadDataMissing -->
        <test-method signature="test_CreateUserWithInvalidPassword()[pri:0, instance:tests.VerifyNegativeScenarioUserAndBook@3542162a]" started-at="2025-07-25T01:15:11 IST" name="test_CreateUserWithInvalidPassword" finished-at="2025-07-25T01:15:12 IST" duration-ms="553" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_CreateUserWithInvalidPassword -->
        <test-method signature="updateBookInCollection()[pri:0, instance:tests.VerifyNegativeScenarioUserAndBook@3542162a]" started-at="2025-07-25T01:15:12 IST" name="updateBookInCollection" finished-at="2025-07-25T01:15:13 IST" depends-on-methods="tests.VerifyPositiveScenarioForUserAccountTest.NewUserCreation" duration-ms="579" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateBookInCollection -->
      </class> <!-- tests.VerifyNegativeScenarioUserAndBook -->
      <class name="tests.VerifyPositiveScenarioForBookTest">
        <test-method signature="createBookInCollection()[pri:1, instance:tests.VerifyPositiveScenarioForBookTest@7c541c15]" started-at="2025-07-25T01:15:04 IST" name="createBookInCollection" finished-at="2025-07-25T01:15:05 IST" depends-on-methods="tests.VerifyPositiveScenarioForUserAccountTest.GenerateNewTokentoAccessUser, tests.VerifyPositiveScenarioForUserAccountTest.NewUserCreation" duration-ms="750" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBookInCollection -->
        <test-method signature="testGetAllBooks()[pri:2, instance:tests.VerifyPositiveScenarioForBookTest@7c541c15]" started-at="2025-07-25T01:15:05 IST" name="testGetAllBooks" finished-at="2025-07-25T01:15:06 IST" depends-on-methods="tests.VerifyPositiveScenarioForBookTest.createBookInCollection" duration-ms="640" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllBooks -->
        <test-method signature="updateBookInCollection()[pri:3, instance:tests.VerifyPositiveScenarioForBookTest@7c541c15]" started-at="2025-07-25T01:15:06 IST" name="updateBookInCollection" finished-at="2025-07-25T01:15:06 IST" depends-on-methods="tests.VerifyPositiveScenarioForBookTest.createBookInCollection" duration-ms="796" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateBookInCollection -->
        <test-method signature="deleteBookFromCollection()[pri:4, instance:tests.VerifyPositiveScenarioForBookTest@7c541c15]" started-at="2025-07-25T01:15:06 IST" name="deleteBookFromCollection" finished-at="2025-07-25T01:15:07 IST" depends-on-methods="tests.VerifyPositiveScenarioForBookTest.createBookInCollection" duration-ms="809" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteBookFromCollection -->
        <test-method signature="checkIfBookDeleted()[pri:5, instance:tests.VerifyPositiveScenarioForBookTest@7c541c15]" started-at="2025-07-25T01:15:07 IST" name="checkIfBookDeleted" finished-at="2025-07-25T01:15:08 IST" depends-on-methods="tests.VerifyPositiveScenarioForBookTest.deleteBookFromCollection" duration-ms="638" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkIfBookDeleted -->
      </class> <!-- tests.VerifyPositiveScenarioForBookTest -->
    </test> <!-- API Tests -->
  </suite> <!-- FastAPI Test Suite -->
</testng-results>
